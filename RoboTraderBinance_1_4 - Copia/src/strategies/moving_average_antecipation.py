import pandas as pd


# Estrat√©gia de Antecipa√ß√£o de M√©dia M√≥vel
def getMovingAverageAntecipationTradeStrategy(
    stock_data: pd.DataFrame, volatility_factor: float, fast_window=7, medium_window=22, slow_window=40, verbose=True
):
    """
    Estrat√©gia avan√ßada de antecipa√ß√£o de movimentos usando tr√™s m√©dias m√≥veis.
    Utiliza m√©dias m√≥veis r√°pida, m√©dia e lenta para detectar tend√™ncias e antecipa√ß√µes.
    
    Args:
        stock_data: DataFrame com dados de pre√ßo
        volatility_factor: Fator de multiplica√ß√£o da volatilidade para determinar limiares
        fast_window: Tamanho da janela para m√©dia m√≥vel r√°pida
        medium_window: Tamanho da janela para m√©dia m√≥vel m√©dia 
        slow_window: Tamanho da janela para m√©dia m√≥vel lenta
        verbose: Mostrar logs detalhados
        
    Returns:
        bool ou None: True para comprar, False para vender, None para aguardar
    """
    # Garantimos que h√° dados suficientes antes de calcular as m√©dias m√≥veis
    if len(stock_data) < slow_window:
        if verbose:
            print("‚ùå Dados insuficientes para calcular m√©dias m√≥veis. Pulando...")
        return None  # Retorna None para evitar erro

    # Criamos c√≥pias das colunas para evitar o warning de Pandas
    stock_data = stock_data.copy()

    # Calcula as M√©dias Moveis R√°pida, M√©dia e Lenta
    stock_data["ma_fast"] = stock_data["close_price"].rolling(window=fast_window).mean()
    stock_data["ma_medium"] = stock_data["close_price"].rolling(window=medium_window).mean()
    stock_data["ma_slow"] = stock_data["close_price"].rolling(window=slow_window).mean()

    # Calcula a volatilidade (desvio padr√£o) dos pre√ßos
    volatility_window = slow_window  # Normalmente √© a mesma janela que slow_window da MA strategy.
    stock_data["volatility"] = stock_data["close_price"].rolling(window=volatility_window).std()

    # üîπ REMOVE LINHAS INICIAIS COM NaN NAS M√âDIAS
    stock_data.dropna(subset=["ma_fast", "ma_medium", "ma_slow"], inplace=True)

    # Se ainda restam poucos dados ap√≥s remover NaN, pula esse per√≠odo
    if len(stock_data) < slow_window:
        if verbose:
            print("‚ö†Ô∏è Ainda h√° poucos dados ap√≥s remover NaN. Pulando...")
        return None

    # Pega as √∫ltimas m√©dias m√≥veis e as anteriores para calcular gradientes
    last_ma_fast = stock_data["ma_fast"].iloc[-1]
    prev_ma_fast = stock_data["ma_fast"].iloc[-3]
    
    last_ma_medium = stock_data["ma_medium"].iloc[-1]
    prev_ma_medium = stock_data["ma_medium"].iloc[-3]
    
    last_ma_slow = stock_data["ma_slow"].iloc[-1]
    prev_ma_slow = stock_data["ma_slow"].iloc[-3]

    # √öltima volatilidade (evita erro se houver NaN)
    last_volatility = stock_data["volatility"].dropna().iloc[-2] if not stock_data["volatility"].isna().all() else None
    if last_volatility is None:
        return None

    # Calcula os gradientes (taxa de mudan√ßa) das m√©dias m√≥veis
    fast_gradient = last_ma_fast - prev_ma_fast
    medium_gradient = last_ma_medium - prev_ma_medium
    slow_gradient = last_ma_slow - prev_ma_slow

    # Calcula as diferen√ßas entre as m√©dias
    fast_medium_diff = abs(last_ma_fast - last_ma_medium)
    medium_slow_diff = abs(last_ma_medium - last_ma_slow)

    # Inicializa a decis√£o
    ma_trade_decision = None

    # Limiar baseado na volatilidade
    threshold = last_volatility * volatility_factor

    # Toma a decis√£o com base em todas as m√©dias m√≥veis
    # L√ìGICA AVAN√áADA: Usa a m√©dia m√©dia como confirma√ß√£o e a rela√ß√£o entre os gradientes
    
    # Caso de COMPRA: m√©dias se aproximando por baixo com for√ßa suficiente
    if (last_ma_fast < last_ma_medium < last_ma_slow):
        # Verifica se as m√©dias est√£o convergindo com for√ßa (gradientes em ordem crescente)
        if fast_gradient > medium_gradient > slow_gradient:
            # Verifica se a m√©dia r√°pida est√° pr√≥xima o suficiente da m√©dia m√©dia
            if fast_medium_diff < threshold:
                ma_trade_decision = True  # Comprar
    
    # Caso de VENDA: m√©dias se aproximando por cima com for√ßa suficiente
    elif (last_ma_fast > last_ma_medium > last_ma_slow):
        # Verifica se as m√©dias est√£o convergindo com for√ßa (gradientes em ordem decrescente)
        if fast_gradient < medium_gradient < slow_gradient:
            # Verifica se a m√©dia r√°pida est√° pr√≥xima o suficiente da m√©dia m√©dia
            if fast_medium_diff < threshold:
                ma_trade_decision = False  # Vender

    # Log da estrat√©gia e decis√£o
    if verbose:
        print("-------")
        print("üìä Estrat√©gia: Moving Average Antecipation")
        print(f" | √öltima M√©dia R√°pida: {last_ma_fast:.3f}")
        print(f" | √öltima M√©dia M√©dia: {last_ma_medium:.3f}")  # Adicionado log para m√©dia m√≥vel m√©dia
        print(f" | √öltima M√©dia Lenta: {last_ma_slow:.3f}")
        print(f" | √öltima Volatilidade: {last_volatility:.3f}")
        print(f" | Limiar de Antecipa√ß√£o: {threshold:.3f}")
        print(f" | Diferen√ßa Fast-Medium: {fast_medium_diff:.3f}")
        print(f" | Diferen√ßa Medium-Slow: {medium_slow_diff:.3f}")
        print(f' | Gradiente R√°pido: {fast_gradient:.3f} ({ "Subindo" if fast_gradient > 0 else "Descendo" })')
        print(f' | Gradiente M√©dio: {medium_gradient:.3f} ({ "Subindo" if medium_gradient > 0 else "Descendo" })')  # Adicionado log
        print(f' | Gradiente Lento: {slow_gradient:.3f} ({ "Subindo" if slow_gradient > 0 else "Descendo" })')
        print(f' | Decis√£o: {"Comprar" if ma_trade_decision == True else "Vender" if ma_trade_decision == False else "Nenhuma"}')
        print("-------")

    return ma_trade_decision
