import pandas as pd
import numpy as np
from indicators.vortex import vortex  # Importa a fun√ß√£o vortex do arquivo vortex.py

# ------------------------------------------------------------------------
# üîé PAR√ÇMETROS DOS INDICADORES üîé

# Par√¢metros padr√£o para M√©dias M√≥veis
DEFAULT_M7_PERIOD = 7
DEFAULT_M50_PERIOD = 50
DEFAULT_M200_PERIOD = 200

# Par√¢metros padr√£o para RSI
DEFAULT_RSI_PERIOD = 14

# Par√¢metros padr√£o para Estoc√°stico
DEFAULT_SLOWK_WINDOW = 2
DEFAULT_SLOW_STOCHASTIC_SMOOTHING_WINDOW = 3

# Par√¢metros padr√£o para Vortex
DEFAULT_VORTEX_WINDOW = 14

# ------------------------------------------------------------------------
# üßÆ FUN√á√ïES AUXILIARES DE C√ÅLCULO üßÆ

def compute_RSI(series: pd.Series, period: int) -> pd.Series:
    """
    Calcula o RSI utilizando o m√©todo de Wilder (m√©dia exponencial) para suaviza√ß√£o,
    com um per√≠odo padr√£o de 14.
    """
    delta = series.diff()
    up = delta.clip(lower=0)
    down = -delta.clip(upper=0)
    
    # C√°lculo da m√©dia exponencial com alpha = 1/period, conforme o m√©todo de Wilder
    avg_gain = up.ewm(alpha=1/period, min_periods=period, adjust=False).mean()
    avg_loss = down.ewm(alpha=1/period, min_periods=period, adjust=False).mean()
    
    rs = avg_gain / avg_loss
    rsi = 100 - (100 / (1 + rs))
    return rsi

# ------------------------------------------------------------------------
# üìä ESTRAT√âGIA AVAN√áADA (VORTEX + OUTROS) üìä

def getAdvancedTradeStrategy(
    stock_data: pd.DataFrame,
    m7_period: int = DEFAULT_M7_PERIOD,
    m200_period: int = DEFAULT_M200_PERIOD,
    m50_period: int = DEFAULT_M50_PERIOD,
    rsi_period: int = DEFAULT_RSI_PERIOD,
    slowK_window: int = DEFAULT_SLOWK_WINDOW,
    slow_stochastic_smoothing_window: int = DEFAULT_SLOW_STOCHASTIC_SMOOTHING_WINDOW,
    vortex_window: int = DEFAULT_VORTEX_WINDOW,
    verbose: bool = True
):
    """
    Estrat√©gia avan√ßada para criptomoedas, utilizando a fun√ß√£o 'vortex'
    importada do arquivo vortex.py para calcular o Indicador Vortex.
    
    Cada indicador √© calculado com o per√≠odo correspondente:
      - M7: m√©dia m√≥vel de 'm7_period' per√≠odos.
      - M200: m√©dia m√≥vel de 'm200_period' per√≠odos.
      - M50: m√©dia m√≥vel de 'm50_period' per√≠odos.
      - RSI: per√≠odo de 'rsi_period'.
      - Slow Stochastic: %K calculado com 'slowK_window' per√≠odos e suaviza√ß√£o com 'slow_stochastic_smoothing_window'.
      - Vortex: calculado com 'vortex_window' per√≠odos.
    
    Condi√ß√µes para COMPRA:
      1. VIP (VI+) > VIM (VI-) no per√≠odo atual
      2. VIP (VI+) < VIM (VI-) no per√≠odo anterior
      
    Condi√ß√µes para VENDA:
      a. Se VIP < VIM no per√≠odo atual
      b. Se o Slow Stochastic do per√≠odo anterior (Sst[1]) > 65

    Retorna True para sinal de compra e False para sinal de venda.
    """
    # ------------------------------------------------------------------------
    # üîç PREPARA√á√ÉO DOS DADOS üîç
    
    df = stock_data.copy()
    df.sort_values("open_time", inplace=True)

    # ------------------------------------------------------------------------
    # üìä C√ÅLCULO DOS INDICADORES üìä
    
    # C√°lculo das M√©dias M√≥veis utilizando min_periods=1
    df["M7"]   = df["close_price"].rolling(window=m7_period, min_periods=1).mean()
    df["M200"] = df["close_price"].rolling(window=m200_period, min_periods=1).mean()
    df["M50"]  = df["close_price"].rolling(window=m50_period, min_periods=1).mean()
    
    # C√°lculo do RSI
    df["RSI14"] = compute_RSI(df["close_price"], rsi_period)
    
    # C√°lculo do Slow Stochastic utilizando min_periods=1
    df["lowest_low"]   = df["low_price"].rolling(window=slowK_window, min_periods=slowK_window).min()
    df["highest_high"] = df["high_price"].rolling(window=slowK_window, min_periods=slowK_window).max()
    df["fast_K"] = 100 * (df["close_price"] - df["lowest_low"]) / (df["highest_high"] - df["lowest_low"])
    df["SlowS"] = df["fast_K"].rolling(window=slow_stochastic_smoothing_window, min_periods=slow_stochastic_smoothing_window).mean()

    # C√°lculo do Indicador Vortex utilizando a fun√ß√£o importada e preenchendo os NaN com backfill.
    df["VIP"] = vortex(df, window=vortex_window, positive=True).bfill()
    df["VIM"] = vortex(df, window=vortex_window, positive=False).bfill()
    
    # Verifica se h√° dados suficientes para compara√ß√£o (pelo menos 2 linhas)
    if len(df) < 2:
        if verbose:
            print("‚ö†Ô∏è Dados insuficientes para execu√ß√£o da estrat√©gia.")
        return None

    # ------------------------------------------------------------------------
    # üîÑ AN√ÅLISE E GERA√á√ÉO DE SINAIS üîÑ
    
    # Seleciona os √∫ltimos dois registros para compara√ß√£o
    latest = df.iloc[-1]
    prev   = df.iloc[-2]

    # Condi√ß√µes para COMPRA
    buy_conditions = (
        (latest["VIP"] > latest["VIM"]) and
        (prev["VIP"] < prev["VIM"]) 
    )
    
    # Condi√ß√µes para VENDA
    sell_condition1 = (latest["VIP"] < latest["VIM"])
    sell_condition2 = (prev["SlowS"] > 65)

    # Decis√£o de negocia√ß√£o
    if sell_condition1 or sell_condition2:    
        trade_decision = False  # Sinal de VENDA
    elif buy_conditions:
        trade_decision = True   # Sinal de COMPRA
    else:
        trade_decision = None

    # ------------------------------------------------------------------------
    # üìù LOGS E SA√çDA VERBOSA üìù
    
    # Impress√£o dos dados (verbose)
    if verbose:
        # Presume-se que o √≠ndice do DataFrame contenha a data do candle.
        data_candle = latest.name
        if isinstance(data_candle, pd.Timestamp):
            data_candle_str = data_candle.strftime("%d/%m/%Y %H:%M:%S")
        else:
            data_candle_str = str(data_candle)
            
        print("-------")
        print("üìä Estrat√©gia: Indicadores Avan√ßados (Vortex + Outros)")
        print(f" | Candle (index): {data_candle_str}")
        
        # Impress√£o do campo 'open_time' do DataFrame
        if "open_time" in df.columns:
            open_time_val = latest["open_time"]
            if isinstance(open_time_val, pd.Timestamp):
                open_time_str = open_time_val.strftime("%d/%m/%Y %H:%M:%S")
            else:
                open_time_str = str(open_time_val)
            print(f" | Open Time: {open_time_str}")
        
        print(f" | Fechamento: {latest['close_price']:.3f}")
        print(f" | SlowS({slow_stochastic_smoothing_window}): {latest['SlowS']:.3f}")
        print(f" | VIP(VI+) ({vortex_window}): {latest['VIP']:.3f} (Anterior: {prev['VIP']:.3f})")
        print(f" | VIM(VI-) ({vortex_window}): {latest['VIM']:.3f} (Anterior: {prev['VIM']:.3f})")
        decision_text = "Comprar" if trade_decision else "Vender" if trade_decision is False else "Nenhuma a√ß√£o"
        print(f" | Decis√£o: {decision_text}")
        print("-------")
    
    return trade_decision